import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üõí –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤", layout="wide")
st.title("üß† –ò–ò –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ API")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä "—É–º–Ω—ã—Ö" –¥–∞–Ω–Ω—ã—Ö
def generate_smart_data():
    brands = ['Nike', 'Adidas', 'Apple', 'Samsung', 'Zara', 'Levi\'s', 'Sony', 'Dyson']
    categories = ['–û–¥–µ–∂–¥–∞', '–û–±—É–≤—å', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã']
    
    np.random.seed(42)
    data = []
    
    for i in range(1, 101):
        brand = np.random.choice(brands)
        category = np.random.choice(categories)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        base_price = np.random.randint(30, 500)
        min_order = np.random.choice([5, 10, 20, 50])
        delivery_time = np.random.randint(10, 40)
        quality_score = np.random.uniform(3.0, 5.0)
        popularity = np.random.randint(1, 100)
        
        # –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        features = {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª': np.random.choice(['–•–ª–æ–ø–æ–∫', '–ü–æ–ª–∏—ç—Å—Ç–µ—Ä', '–ö–æ–∂–∞', '–†–µ–∑–∏–Ω–∞', '–ú–µ—Ç–∞–ª–ª', '–°—Ç–µ–∫–ª–æ']),
            '–¶–≤–µ—Ç': np.random.choice(['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–ó–µ–ª–µ–Ω—ã–π']),
            '–†–∞–∑–º–µ—Ä': np.random.choice(['S', 'M', 'L', 'XL', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']),
            '–í–µ—Å (–≥)': np.random.randint(50, 2000),
            '–ì–∞—Ä–∞–Ω—Ç–∏—è': np.random.choice([0, 6, 12, 24]),
            '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': np.random.choice(['A++', 'A+', 'A', 'B', 'C'])
        }
        
        # –ò–ò-–æ—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞
        value_score = min_order * (quality_score / base_price) * 100
        
        data.append({
            'ID': i,
            '–ë—Ä–µ–Ω–¥': brand,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': f"{brand} {category}-{i}",
            '–û–ø–∏—Å–∞–Ω–∏–µ': f"{features['–¶–≤–µ—Ç']} {features['–ú–∞—Ç–µ—Ä–∏–∞–ª']} {category.lower()} –æ—Ç {brand}",
            '–¶–µ–Ω–∞ ($/—à—Ç)': base_price,
            '–ú–∏–Ω. –∑–∞–∫–∞–∑ (—à—Ç)': min_order,
            '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω)': delivery_time,
            '–ö–∞—á–µ—Å—Ç–≤–æ (1-5)': round(quality_score, 1),
            '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (1-100)': popularity,
            '–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏': round(value_score, 1),
            **features
        })
    
    return pd.DataFrame(data)

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = generate_smart_data()
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.sidebar.columns(2)
    with col1:
        selected_brands = st.multiselect(
            "–ë—Ä–µ–Ω–¥—ã:", 
            options=df['–ë—Ä–µ–Ω–¥'].unique(),
            default=['Nike', 'Adidas']
        )
    with col2:
        selected_categories = st.multiselect(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", 
            options=df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique(),
            default=['–û–¥–µ–∂–¥–∞', '–û–±—É–≤—å']
        )
    
    min_quality = st.sidebar.slider("–ú–∏–Ω. –∫–∞—á–µ—Å—Ç–≤–æ", 3.0, 5.0, 4.0)
    max_delivery = st.sidebar.slider("–ú–∞–∫—Å. —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏", 10, 40, 30)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df[
        (df['–ë—Ä–µ–Ω–¥'].isin(selected_brands)) &
        (df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(selected_categories)) &
        (df['–ö–∞—á–µ—Å—Ç–≤–æ (1-5)'] >= min_quality) &
        (df['–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω)'] <= max_delivery)
    ]
    
    # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    if filtered_df.empty:
        st.warning("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.")
        return
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3 = st.columns(3)
    avg_price = filtered_df['–¶–µ–Ω–∞ ($/—à—Ç)'].mean()
    best_value = filtered_df['–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏'].max()
    popular_brand = filtered_df.groupby('–ë—Ä–µ–Ω–¥')['–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (1-100)'].mean().idxmax()
    
    col1.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"${avg_price:.2f}")
    col2.metric("–õ—É—á—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å", f"{best_value:.1f} –±–∞–ª–ª–æ–≤")
    col3.metric("–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±—Ä–µ–Ω–¥", popular_brand)
    
    # –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    st.subheader("üöÄ –¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    top_products = filtered_df.sort_values('–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏', ascending=False).head(5)
    st.dataframe(top_products[['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ë—Ä–µ–Ω–¥', '–¶–µ–Ω–∞ ($/—à—Ç)', '–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏', '–ö–∞—á–µ—Å—Ç–≤–æ (1-5)']])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.subheader("üìà –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    tab1, tab2 = st.tabs(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã"])
    
    with tab1:
        fig = px.histogram(filtered_df, x='–¶–µ–Ω–∞ ($/—à—Ç)', nbins=20, 
                          title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º')
        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        fig = px.scatter(filtered_df, x='–¶–µ–Ω–∞ ($/—à—Ç)', y='–ö–∞—á–µ—Å—Ç–≤–æ (1-5)', 
                        color='–ë—Ä–µ–Ω–¥', size='–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (1-100)',
                        hover_data=['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'],
                        title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ')
        st.plotly_chart(fig, use_container_width=True)
    
    # –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üß† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    st.write("### –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category in selected_categories:
        cat_df = filtered_df[filtered_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
        if not cat_df.empty:
            best_product = cat_df.loc[cat_df['–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏'].idxmax()]
            st.write(f"- **{category}**: {best_product['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']} "
                     f"(–¶–µ–Ω–∞: ${best_product['–¶–µ–Ω–∞ ($/—à—Ç)']}, "
                     f"–û—Ü–µ–Ω–∫–∞: {best_product['–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏']:.1f})")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.write("### –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    st.write("1. **–§–æ–∫—É—Å –Ω–∞ –±—Ä–µ–Ω–¥–µ**: " + popular_brand + " –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å")
    
    price_quality_ratio = filtered_df['–ö–∞—á–µ—Å—Ç–≤–æ (1-5)'] / filtered_df['–¶–µ–Ω–∞ ($/—à—Ç)']
    best_ratio_brand = filtered_df.iloc[price_quality_ratio.idxmax()]['–ë—Ä–µ–Ω–¥']
    st.write(f"2. **–õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ**: {best_ratio_brand}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    expensive_low_quality = filtered_df[
        (filtered_df['–¶–µ–Ω–∞ ($/—à—Ç)'] > avg_price) & 
        (filtered_df['–ö–∞—á–µ—Å—Ç–≤–æ (1-5)'] < 4.0)
    ]
    if not expensive_low_quality.empty:
        st.warning("3. **–í–Ω–∏–º–∞–Ω–∏–µ!** –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π –∏ –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º:")
        st.dataframe(expensive_low_quality[['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ë—Ä–µ–Ω–¥', '–¶–µ–Ω–∞ ($/—à—Ç)', '–ö–∞—á–µ—Å—Ç–≤–æ (1-5)']])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    st.download_button(
        label="üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        data=filtered_df.to_csv(index=False).encode('utf-8'),
        file_name='—Ç–æ–≤–∞—Ä—ã_–∞–Ω–∞–ª–∏–∑.csv',
        mime='text/csv'
    )

if __name__ == "__main__":
    main()
