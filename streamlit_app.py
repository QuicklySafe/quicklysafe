import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üõí –ú–æ–π –ò–ò –ë–∞–π—Ç–µ—Ä–∞", layout="wide")
st.title("üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫—É–ø–æ–∫")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
def generate_product_data():
    brands = ['Nike', 'Adidas', 'Apple', 'Samsung', 'Zara', 'Levi\'s', 'Sony', 'Dyson']
    categories = ['–û–¥–µ–∂–¥–∞', '–û–±—É–≤—å', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã']
    countries = ['–ö–∏—Ç–∞–π', '–°–®–ê', '–ì–µ—Ä–º–∞–Ω–∏—è', '–ò—Ç–∞–ª–∏—è']
    
    np.random.seed(42)
    data = []
    
    for i in range(1, 51):
        brand = np.random.choice(brands)
        category = np.random.choice(categories)
        country = np.random.choice(countries)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
        if category == '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞':
            base_price = np.random.randint(300, 2000)
        elif category == '–û–±—É–≤—å':
            base_price = np.random.randint(60, 300)
        else:
            base_price = np.random.randint(30, 150)
        
        # –ü—Ä–µ–º–∏—É–º –±—Ä–µ–Ω–¥—ã
        if brand in ['Apple', 'Dyson']:
            base_price *= 1.5
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω—ã
        logistics = np.random.uniform(3, 15)
        delivery_time = np.random.randint(10, 40)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        min_order = np.random.choice([10, 25, 50, 100])
        rating = round(np.random.uniform(3.0, 5.0), 1)
        
        data.append({
            'ID': i,
            '–ë—Ä–µ–Ω–¥': brand,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
            '–°—Ç—Ä–∞–Ω–∞': country,
            '–¢–æ–≤–∞—Ä': f"{brand} {category[:3]}-{i}",
            '–¶–µ–Ω–∞ ($)': round(base_price, 2),
            '–ú–∏–Ω. –∑–∞–∫–∞–∑ (—à—Ç)': min_order,
            '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ($/—à—Ç)': round(logistics, 2),
            '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω)': delivery_time,
            '–¢–∞–º–æ–∂–Ω—è (%)': np.random.choice([5, 7, 10]),
            '–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': rating,
            '–°—Å—ã–ª–∫–∞': f"https://example.com/{brand.lower()}/{i}"
        })
    
    return pd.DataFrame(data)

# –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_total(row):
    base_price = row['–¶–µ–Ω–∞ ($)']
    logistics = row['–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ($/—à—Ç)']
    customs = base_price * (row['–¢–∞–º–æ–∂–Ω—è (%)'] / 100)
    return round(base_price + logistics + customs, 2)

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    df = generate_product_data()
    df['–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ ($/—à—Ç)'] = df.apply(calculate_total, axis=1)
    
    selected_brands = st.sidebar.multiselect(
        "–ë—Ä–µ–Ω–¥—ã:", 
        options=df['–ë—Ä–µ–Ω–¥'].unique(),
        default=['Nike', 'Adidas']
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered_df = df[df['–ë—Ä–µ–Ω–¥'].isin(selected_brands)]
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
    st.header("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    for _, row in filtered_df.iterrows():
        st.subheader(f"{row['–¢–æ–≤–∞—Ä']} ({row['–ë—Ä–µ–Ω–¥']})")
        st.write(f"**–°—Ç—Ä–∞–Ω–∞:** {row['–°—Ç—Ä–∞–Ω–∞']}")
        st.write(f"**–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:** ${row['–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ ($/—à—Ç)']} "
                 f"(–¢–æ–≤–∞—Ä: ${row['–¶–µ–Ω–∞ ($)']} + "
                 f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞: ${row['–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ($/—à—Ç)']} + "
                 f"–ü–æ—à–ª–∏–Ω–∞: {row['–¢–∞–º–æ–∂–Ω—è (%)']}%)")
        st.write(f"**–ú–∏–Ω. –∑–∞–∫–∞–∑:** {row['–ú–∏–Ω. –∑–∞–∫–∞–∑ (—à—Ç)']} —à—Ç | "
                 f"**–î–æ—Å—Ç–∞–≤–∫–∞:** {row['–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω)']} –¥–Ω–µ–π | "
                 f"**–†–µ–π—Ç–∏–Ω–≥:** {row['–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}/5.0")
        st.markdown(f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({row['–°—Å—ã–ª–∫–∞']})")
        st.divider()
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
    st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω")
    fig = px.bar(
        filtered_df,
        x='–¢–æ–≤–∞—Ä',
        y='–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ ($/—à—Ç)',
        color='–ë—Ä–µ–Ω–¥',
        title='–¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤'
    )
    st.plotly_chart(fig)

if __name__ == "__main__":
    main()
